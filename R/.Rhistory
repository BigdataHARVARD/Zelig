z5 <- zbprobit$new()
z5$zelig(cbind(import, export) ~ coop + cost + target, data = sanction)
z5
z5$setx(cost=1)
set.seed(42)
z5$sim(num=1000)
z5 <- zbprobit$new()
install.packages("~/Documents/LocalGit/GitHub/Zelig5Loc/Zelig5_0.1.tar.gz", repos = NULL, type = "source")
library(Zelig5)
data(sanction)
z5 <- zbprobit$new()
z5$zelig(cbind(import, export) ~ coop + cost + target, data = sanction)
z5
z5$setx(cost=1)
set.seed(42)
z5$sim(num=1000)
z5$summarize()
z5$cite()
library(Zelig5)
Zelig5::z
require(devtools)
install_github('seleniumJars', 'LluisRamon')
install_github('relenium', 'LluisRamon')
require(XML)
require(Relenium)
require(relenium)
firefox <- firefoxClass$new()
firefox$get("http://lluisramon.github.io/relenium/toyPageExample.html")
firefox$printHtml()
inputElement <- firefox$findElementByXPath("//*[@id='main_content']/div[1]/form/input")
inputElement$sendKeys("R Project")
inputElement$sendKeys(key = "ENTER")
buttonElement <- firefox$findElementByXPath("//*[@id='main_content']/a")
buttonElement$click()
infoTable <- firefox$findElementByXPath("//*[@id='myModal']/div/div/div/table")
readHTMLTable(infoTable$getHtml(), header = TRUE)[[1]] # Using XML Package
buttonElement <- firefox$findElementByXPath("//*[@id='myModal']/div/div/div/button")
buttonElement$click()
selectElement <- firefox$findElementByXPath("//*[@id='main_content']/select")
selectElement$printHtml()
optsList <- selectElement$getOptions()
sapply(optsList, function(optEle){
optEle$getText()
})
selectElement$selectByValue("Mango")
selectElement$selectByValue("Nectarine")
optsSel <- selectElement$getAllSelectedOptions()
sapply(optsSel, function(optEle){
optEle$getText()
})
selectElement$deselectAll()
firefox$get("http://lluisramon.github.io/relenium/")
firefox$back()
firefox$close()
firefox <- firefoxClass$new()
firefox$get("http://ampd.epa.gov/ampd/")
r <- firefox$findElementByLinkText("Query")
r$click()
r$click()
r2 <- firefox$findElementByName("gxt.RadioGroup.0")
r2 <- firefox$findElementByName("gxt.RadioGroup.0")
r2$click()
q <- firefox$findElementByClassName("querybtn")
q$getText()
q$click()
but <- firefox$findElementByXPath("//input[@name='START']
[@type='button']")
buttonElement <- firefox$findElementByXPath("//*[@id='myModal']/div/div/div/button")
firefox$findElementByClassName("x-form-cb-label")
firefox$findElementByClassName("x-form-radio")
r2 <- firefox$findElementByName("gxt.RadioGroup.0")
firefox$findElementByClassName("x-form-radio")
firefox$findElementByClassName("x-form-radio")$check()
firefox$findElementByClassName("x-form-radio")$checked()
firefox$findElementByClassName("x-form-radio")$checked
firefox$findElementByClassName("x-form-radio")
firefox$findElementByClassName("x-form-radio")$value
r <- firefox$findElementByClassName("x-form-radio")
r$click
r$click()
r$click()
r$clear()
r$getId()
r$getText()
r$getHtml()
firefox$findElementByClassName("x-form-cb-label")
install.packages("NMMAPSdata", contriburl = "http://www.ihapss.jhsph.edu/data/NMMAPS/R/", type = "source")
stopifnot
rats <- data.frame(id = paste0("rat",1:10),
sex = factor(rep(c("female","male"),each=5)),
weight = c(2,4,1,11,18,12,7,12,19,20),
length = c(100,105,115,130,95,150,165,180,190,175))
summary(rats)
ratsTable <- data.frame(id = paste0("rat",c(6,9,7,3,5,1,10,4,8,2)),
secretID = 1:10)
ratsTable
match(rats$weight)[ratsTable$id]
rats$weight[match(ratsTable$id, rats$id)]
rats
mydata <- read.csv("https://www.betydb.org/miscanthus_county_avg_yield.csv")
mydata <- read.csv("http://www.betydb.org/miscanthus_county_avg_yield.csv")
library(googleVis)
p <- gvisGeoChart(data = mydata, locationvar="STATE_NAME", colorvar = 'Avg_yield',
options= list(region="US", displayMode="regions",
resolution="provinces"))
plot(p)
library(googleVis)
install.packages("googleVis")
library(Zelig)
data(cars)
install.packages("zipcode")
require(zipcode)
require(zipcode)
data(zipcode)
zipcode
View(zipcode)
library(zipcode)
library(zipcode)
View(zipcode)
setwd("~/Documents/Acid_Rain_Program/AQS")
library(data.table)
library(tools)
getData <- function(code="annual_all_", name="Annual", years=1990:2014) {
l <- list()
dirdata <- file.path("Data", name)
dir.create(dirdata, showWarnings = FALSE)
files <- paste("http://aqsdr1.epa.gov/aqsweb/aqstmp/airdata/", code,
years, ".zip", sep="")
for (i in 1:length(files)) {
url <- files[i]
file <- basename(url)
download.file(url, file)
untar(file, compressed = 'gzip', exdir = dirdata)
DO <- data.table(read.csv(file.path(dirdata, paste(file_path_sans_ext(file),
"csv", sep=".")), header=TRUE))
print("Extract year")
DO[, Year := format(as.Date(Date.Local), "%Y")]
print("Extract month")
DO[, Month := format(as.Date(Date.Local), "%m")]
print("Extract day")
DO[, Day := format(as.Date(Date.Local), "%d")]
print("Create monthly data")
byvar <- c("State.Code", "County.Code", "POC", "Site.Num",
"Latitude", "Longitude",
"State.Name", "County.Name",
"Year", "Month")
DA <- DO[, list(Measure = mean(Arithmetic.Mean)), by=byvar]
setkeyv(DA, c("Year", "Month"))
l[[i]] <- DA
}
print("Purge downloaded zip files")
zipfiles <- dir(path=".",  pattern=".zip")
file.remove(zipfiles)
print("Bind data tables")
D <- rbindlist(l)
print("Write aggregated data")
write.csv(D, paste(file.path("Data", name), "csv", sep="."))
}
getData(code="daily_81102_", name="PM10")
SO2 <- fread("PM10.csv")
SO2 <- fread("PM10.csv")
library(data.table)
library(fields)
SO2 <- fread("PM10.csv")
setwd("~/Documents/Acid_Rain_Program/Closest_Location")
SO2 <- fread("PM10.csv")
facility <- fread("arp_facility.csv")
setkeyv(facility, c("Facility.Latitude", "Facility.Longitude"))
m <- SO2[, Longitude, Latitude]
PM10 <- fread("PM10.csv")
m <- PM10[, Longitude, Latitude]
f <- facility[, Facility.Longitude, Facility.Latitude]
setkey(m)
mu <- unique(m)
setkey(f)
fu <- unique(f)
mu <- cbind("Monitor", mu)
fu <- cbind("Facility", fu)
mu
fu
loc <- rbind(mu, fu, use.names=FALSE)
mu
m
names(PM10)
length(unique(PM10$Site.Num))
length(unique(PM10$POC))
setkeyv(PM10, "Site.Num", "POC")
unique(PM10)
PM10[, ID := paste(Site.Num, Site.Num)]
setkey(PM10, ID)
unique(PM10)
m
mu
names(PM10)
cat(names(PM10))
setkeyv(PM10, "State.Code", "Site.Num", "Site.Num")
PM10 <- fread("PM10.csv")
setkeyv(PM10, "State.Code", "Site.Num", "Site.Num")
setkeyv(PM10, "State.Code", "County.Code", "Site.Num")
names(PM10)
setkey(PM10, c("State.Code", "County.Code", "Site.Num"))
setkey(PM10, c(State.Code, County.Code, Site.Num))
PM10[, ID := paste(State.Code, County.Code, Site.Num)]
setkey(PM10, ID)
unique(PM10)
mu
data(zipcodes)
data(zipcode)
zipcode
View(zipcode)
ZIP <- data.table(zipcode)
ZIP
setkeyv(ZIP, c("Latitude", Longitude"))
setkeyv(ZIP, c("Latitude", "Longitude"))
setkeyv(ZIP, c("latitude", "Llngitude"))
setkeyv(ZIP, c("latitude", "longitude"))
m <- PM10[, Longitude, Latitude]
f <- ZIP[, longitude, latitude]
setkey(m)
mu <- unique(m)
setkey(f)
fu <- unique(f)
mu <- cbind("Monitor", mu)
fu <- cbind("Zip", fu)
loc <- rbind(mu, fu, use.names=FALSE)
names(loc)[1] <- "Type"
loc
distmat <- rdist.earth(fu, mu)
fu
mu
mu <- cbind("Monitor", mu)
fu <- cbind("Zip", fu)
distmat <- rdist.earth(fu, mu)
fu
mu
dim(distmat)
distmat <- rdist.earth(fu, mu)
names(fu)
distmat <- rdist.earth(fu[, c("latitude", "longitude")], mu)
fu[, c("latitude", "longitude")]
fu[, c(latitude, longitude)]
fu[, list(latitude, longitude)]
names(mu)
distmat <- rdist.earth(fu[, list(latitude, longitude)], mu[, list(Latitude, Longitude)])
dismat
distmat
fu
mu
dim(distmat)
d <- distmat[1, ]
d
View(distmat)
fu[, list(latitude, longitude)]
ZIP
f <- ZIP[, longitude, latitude]
f
d
distmat[, 1]
z <- ZIP[, longitude, latitude]
setkey(z)
zu <- unique(f)
mu <- cbind("Monitor", mu)
zu <- cbind("Zip", fu)
zu <- cbind("Zip", zu)
loc <- rbind(mu, zu, use.names=FALSE)
names(loc)[1] <- "Type"
zu <- unique(f)
zu <- cbind("Zip", zu)
loc <- rbind(mu, zu, use.names=FALSE)
names(loc)[1] <- "Type"
loc <- rbind(mu, zu, use.names=FALSE)
m <- PM10[, Longitude, Latitude]
z <- ZIP[, longitude, latitude]
setkey(m)
mu <- unique(m)
setkey(z)
zu <- unique(f)
mu <- cbind("Monitor", mu)
zu <- cbind("Zip", zu)
loc <- rbind(mu, zu, use.names=FALSE)
names(loc)[1] <- "Type"
loc
library(ggplot2)
library(maps)
#load us map data
all_states <- map_data("state")
#plot all states with ggplot
p <- ggplot()
p <- p + geom_polygon(data=all_states, aes(x=long, y=lat, group = group), colour="white", fill="grey10")
p <- p + geom_point(data=loc, aes(x=Longitude, y=Latitude, color = Type), size = 1)
p
ggsave(filename="zip.pdf", p)
ggsave(filename="zip.pdf", p)
distmat
distmat[1, ]
distmat[2, ]
fu
zu
mu
distmat <- rdist.earth(mu[, list(Latitude, Longitude)], fu[, list(latitude, longitude)])
system.time(distmat <- rdist.earth(mu[, list(Latitude, Longitude)], fu[, list(latitude, longitude)]))
min(3, NA)
which.min(3, NA)
which.min(c(3, NA))
min(c(3, NA))
which.min(3, NA)
whichmin <- function(i, within = 6, neighbors = 3) {
d <- distmat[i, ]
Min.Distance <-  min(d, na.rm = TRUE)
Index <- which.min(d)
Within.Distance <- length(d[d < within])
Closest.ZIP <- which(d %in% sort(d)[1:neighbors])
Closest.Distances <- d[Closest.ZIP]
return(c(Min.Distance = Min.Distance,
Index = Index,
Within.Distance = Within.Distance,
Closest.Monitors = Closest.Monitors,
Closest.Distances = Closest.Distances
))
}
dim(distmat)
dd <- matrix(NA, 1347, 9)
for (i in 1:10)
dd[i, ] <- whichmin(i)
whichmin <- function(i, within = 6, neighbors = 3) {
d <- distmat[i, ]
Min.Distance <-  min(d, na.rm = TRUE)
Index <- which.min(d)
Within.Distance <- length(d[d < within])
Closest.ZIP <- which(d %in% sort(d)[1:neighbors])
Closest.Distances <- d[Closest.ZIP]
return(c(Min.Distance = Min.Distance,
Index = Index,
Within.Distance = Within.Distance,
Closest.ZIP = Closest.ZIP,
Closest.Distances = Closest.Distances
))
}
d <- distmat[1, ]
dd <- matrix(NA, 1347, 9)
for (i in 1:10)
dd[i, ] <- whichmin(i)
dd
head(dd)
names(dd) <- c("Min.Distance", "Index", "Within.Distance",
"Closest.ZIP.1", "Closest.ZIP.2", "Closest.ZIP.3",
"Closest.Distance.1", "Closest.Distance.2", "Closest.Distance.3")
head(dd)
dd <- as.data.frame(dd)
names(dd) <- c("Min.Distance", "Index", "Within.Distance",
"Closest.ZIP.1", "Closest.ZIP.2", "Closest.ZIP.3",
"Closest.Distance.1", "Closest.Distance.2", "Closest.Distance.3")
head(dd)
dim(distmat)
dd <- matrix(NA, 3136, 9)
for (i in 1:3136)
dd[i, ] <- whichmin(i)
View(dd)
dd
dd$Within
dd
dd <- as.data.frame(dd)
names(dd) <- c("Min.Distance", "Index", "Within.Distance",
"Closest.ZIP.1", "Closest.ZIP.2", "Closest.ZIP.3",
"Closest.Distance.1", "Closest.Distance.2", "Closest.Distance.3")
dd
dd$Within.Distance
sort(unique(dd$Within.Distance))
dim(dd)
setwd("~/Documents/LocalGit/Zelig5 GIT/R")
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
source(file.path("..", "R", "utils.R"))
setwd("~/Documents/LocalGit/Zelig5 GIT/R")
source(file.path("..", "R", "utils.R"))
source(file.path("..", "R", "model-zelig.R"))
source(file.path("..", "R", "model-ls.R"))
z5 <- zls$new()
data(cars)
z5$zelig(dist ~ speed, data = cars)
z5
z5$model.call
z5$zelig.call
z5$setx(sascxasx = 9879, speed = 30, sdjchbsdc =87, kcsbc = 8787)
z5$setx(sascxasx = 9879)
z5$setx(speed = 30)
z5$setx(sascxasx = 9879)
z5$setx(speed = 30)
set.seed(42)
z5$sim(num=100)
libray(MASSS)
libray(MASS)
library(MASS)
z5$sim(num=100)
z5$summarize()
z5$cite()
z5$toJSON
z5$toJSON()
z5$json
z5 <- zls$new()
z5$zelig(dist ~ speed, data = cars)
z5
z5$model.call
z5$zelig.call
z5$setx(sascxasx = 9879, speed = 30, sdjchbsdc =87, kcsbc = 8787)
z5$setx(sascxasx = 9879)
z5$setx(speed = 30)
set.seed(42)
z5$sim(num=100)
z5$summarize()
z5$cite()
z5$toJSON()
z5$json
z5 <- zls$new()
z5$zelig(dist ~ speed, data = cars)
z5
z5$setx(speed = 30)
set.seed(42)
z5$sim(num=100)
z5$summarize()
z5$toJSON()
z5$json
source(file.path("..", "R", "utils.R"))
source(file.path("..", "R", "model-zelig.R"))
source(file.path("..", "R", "model-ls.R"))
z5 <- zls$new()
z5$zelig(dist ~ speed, data = cars)
z5
z5$setx(speed = 30)
set.seed(42)
z5$sim(num=100)
z5$summarize()
z5$toJSON()
z5$json
cat(z5$json)
source(file.path("..", "R", "utils.R"))
source(file.path("..", "R", "model-zelig.R"))
source(file.path("..", "R", "model-ls.R"))
z5 <- zls$new()
z5$zelig(dist ~ speed, data = cars)
z5
z5$setx(speed = 30)
set.seed(42)
z5$sim(num=100)
z5$summarize()
z5$toJSON()
cat(z5$json)
source(file.path("..", "R", "utils.R"))
source(file.path("..", "R", "model-zelig.R"))
source(file.path("..", "R", "model-ls.R"))
z5 <- zls$new()
z5$zelig(dist ~ speed, data = cars)
z5
z5$setx(speed = 30)
set.seed(42)
z5$sim(num=100)
z5$summarize()
z5$toJSON()
cat(z5$json)
z5$model
as.list(z5$model)
source(file.path("..", "R", "utils.R"))
source(file.path("..", "R", "model-zelig.R"))
source(file.path("..", "R", "model-ls.R"))
z5 <- zls$new()
z5$zelig(dist ~ speed, data = cars)
z5
z5$setx(speed = 30)
set.seed(42)
z5$sim(num=100)
z5$summarize()
z5$toJSON()
cat(z5$json)
source(file.path("..", "R", "utils.R"))
source(file.path("..", "R", "model-zelig.R"))
source(file.path("..", "R", "model-ls.R"))
z5 <- zls$new()
z5$zelig(dist ~ speed, data = cars)
z5
z5$setx(speed = 30)
set.seed(42)
z5$sim(num=100)
z5$summarize()
z5$toJSON()
cat(z5$json)
data(cars)
source(file.path("..", "R", "utils.R"))
source(file.path("..", "R", "model-zelig.R"))
source(file.path("..", "R", "model-ls.R"))
z5 <- zls$new()
z5$zelig(dist ~ speed, data = cars)
z5
z5$setx(speed = 30)
set.seed(42)
z5$sim(num=100)
z5$summarize()
z5$toJSON()
cat(z5$json)
source(file.path("..", "R", "utils.R"))
source(file.path("..", "R", "model-zelig.R"))
source(file.path("..", "R", "model-ls.R"))
z5 <- zls$new()
z5$zelig(dist ~ speed, data = cars)
z5
z5$setx(speed = 30)
set.seed(42)
z5$sim(num=100)
z5$summarize()
z5$toJSON()
cat(z5$json)
as.list(z5$json)
